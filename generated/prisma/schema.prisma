// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  bookLoans     BookLoan[]
  reservations  Reservation[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Book {
  id              String        @id @default(uuid())
  title           String
  author          String
  isbn            String        @unique
  publicationYear Int
  publisher       String
  description     String
  quantity        Int
  categoryId      String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  category        Category      @relation(fields: [categoryId], references: [id])
  bookLoans       BookLoan[]
  reservations    Reservation[]
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  books       Book[]
}

model BookLoan {
  id         String     @id @default(uuid())
  userId     String
  bookId     String
  loanDate   DateTime   @default(now())
  dueDate    DateTime
  returnDate DateTime?
  status     LoanStatus @default(ACTIVE)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id])
  book       Book       @relation(fields: [bookId], references: [id])
}

model Reservation {
  id              String            @id @default(uuid())
  userId          String
  bookId          String
  reservationDate DateTime          @default(now())
  status          ReservationStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id])
  book            Book              @relation(fields: [bookId], references: [id])
}

enum Role {
  ADMIN
  LIBRARIAN
  USER
}

enum LoanStatus {
  ACTIVE
  RETURNED
  OVERDUE
}

enum ReservationStatus {
  PENDING
  FULFILLED
  CANCELLED
}
